'.source.cpp':
  'bellman_ford':
    'prefix': 'bellman_ford'
    'body':'''
        const int MAX_E = ${1:100000};
        const int MAX_V = ${2:100000};

        struct edge{int from, to; ll cost;};
        edge es[MAX_E];

        ll d[MAX_V];
        int V, E;

        bool bellman_ford(int s){
          REP(i,V)d[i] = INFll;
          d[s] = 0;
          REP(i,V){
            bool update = false;
            REP(j,E){
              edge e = es[j];
              if(d[e.from] != INFll && d[e.to] > d[e.from] + e.cost){
                d[e.to] = d[e.from] + e.cost;
                update = true;
                if(i == V-1){
                  return false;
                }
              }
            }
            if(!update) break;
          }
          return true;
        }
      '''
  'dijkstra':
    'prefix':'dijkstra'
    'body':'''
        // set V in main
        // d[MAX_V] shows the answer

        const int MAX_V = ${1:100000};

        struct edge{int to; ll cost;};
        typedef pair<ll, int> P;

        int V;
        vector<edge> G[MAX_V];
        ll d[MAX_V];

        void dijkstra(int s){
          priority_queue<P, vector<P>, greater<P>  > que;
          fill(d, d + V, INFll);
          d[s] = 0;
          que.push(P(0,s));

          while(!que.empty()){
            P p = que.top(); que.pop();
            int v = p.second;
            if(d[v] < p.first) continue;
            for(int i = 0; i < G[v].size(); i++){
              edge e = G[v][i];
              if(d[e.to] > d[v] + e.cost){
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to], e.to));
              }
            }
          }
        }
      '''
  'gcd':
    'prefix':'gcd'
    'body':'''
      ll gcd(ll x, ll y){
        if(x == 0)return y;
        return gcd(y%x, x);
      }
      '''
  'mod_nck':
    'prefix':'mod_nck'
    'body':'''
    // mod_nck(n, k) → nCk // O(n)
    // 1. mod_fact(n); mod_inv_fact(n);
    // 2. ll ans = mod_nck(n,k);

    const ll MAX_N = ${1:200000};
    ll fact[MAX_N+1], inv_fact[MAX_N+1];

    ll mod_pow(ll x, ll y){
      ll res = 1;
        while (y) {
            if (y & 1) {
                res = res * x % MOD;
            }
            x = x * x % MOD;
            y >>= 1;
        }
      return res;
    }

    void mod_fact(ll n){
      fact[0] = 1;
      REP(i,n)fact[i+1] = fact[i] * (i+1) % MOD;
    }

    void mod_inv_fact(ll n){
      inv_fact[n] = mod_pow(fact[n], (MOD-2));
      REP(i,n){
        inv_fact[n-1-i] = inv_fact[n-i] * (n-i) % MOD;
      }
    }

    ll mod_comb(int n, int k){
      return fact[n] * inv_fact[k] % MOD * inv_fact[n-k] % MOD ;
    }

      '''
  'nck':
    'prefix':'nck'
    'body':'''
      // pascal's triangle // C[n][k] -> nCk //　O(n^2)
      const int MAX_N = ${1:10000};
      ll C[MAX_N][MAX_N];
      void comb_table(int n){
        REP(i,n+1){
          REP(j,i+1){
            if(j==0 || j==i){
              C[i][j]=1LL;
            }else{
              C[i][j]=(C[i-1][j-1]+C[i-1][j]);
            }
          }
        }
      }
      '''
  'union_find':
    'prefix':'union_find'
    'body':'''
      const int MAX_N = ${1:200000};

      int par[MAX_N];
      int rk[MAX_N];

      void init(int n){
        REP(i,n){
          par[i] = i;
          rk[i] = 0;
        }
      }

      int find(int x){
        if(par[x] == x){
          return x;
        }else{
          return par[x] = find(par[x]);
        }
      }

      void unite(int x, int y){
        x = find(x);
        y = find(y);
        if(x==y) return;
        if(rk[x] < rk[y]){
          par[x] = y;
        }else{
          par[y] = x;
          if(rk[x] == rk[y]) rk[x]++;
        }
      }

      bool same(int x, int y){
        return find(x) == find(y);
      }

      '''
  'extgcd':
    'prefix':'extgcd'
    'body':'''
      // ax + by = 1; return gcd, change x, y

      ll extgcd(ll a, ll b, ll& x, ll& y){
        ll d = a;
        if(b!=0){
          d = extgcd(b, a%b, y, x);
          y -= (a / b) * x;
        }else{
          x = 1; y = 0;
        }
        return d;
      }
      '''
