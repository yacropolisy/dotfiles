'.source.cpp':
  'bellman_ford':
    'prefix': 'bellman_ford'
    'body':'''
        const int MAX_E = ${1:100000};
        const int MAX_V = ${2:100000};

        struct edge{int from, to; ll cost;};
        edge es[MAX_E];

        ll d[MAX_V];
        int V, E;

        bool bellman_ford(int s){
          REP(i,V)d[i] = INFll;
          d[s] = 0;
          REP(i,V){
            bool update = false;
            REP(j,E){
              edge e = es[j];
              if(d[e.from] != INFll && d[e.to] > d[e.from] + e.cost){
                d[e.to] = d[e.from] + e.cost;
                update = true;
                if(i == V-1){
                  return false;
                }
              }
            }
            if(!update) break;
          }
          return true;
        }
      '''
  'dijkstra':
    'prefix':'dijkstra'
    'body':'''
        // set V in main
        // d[MAX_V] shows the answer

        const int MAX_V = ${1:100000};

        struct edge{int to; ll cost;};
        typedef pair<ll, int> P;

        int V;
        vector<edge> G[MAX_V];
        ll d[MAX_V];

        void dijkstra(int s){
          priority_queue<P, vector<P>, greater<P>  > que;
          fill(d, d + V, INFll);
          d[s] = 0;
          que.push(P(0,s));

          while(!que.empty()){
            P p = que.top(); que.pop();
            int v = p.second;
            if(d[v] < p.first) continue;
            for(int i = 0; i < G[v].size(); i++){
              edge e = G[v][i];
              if(d[e.to] > d[v] + e.cost){
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to], e.to));
              }
            }
          }
        }
      '''
  'gcd':
    'prefix':'gcd'
    'body':'''
      ll gcd(ll x, ll y){
        if(x == 0)return y;
        return gcd(y%x, x);
      }
      '''
  'mod_nck':
    'prefix':'mod_nck'
    'body':'''
    // mod_comb(n, k) â†’ nCk // O(n)
    // 1. mod_fact(n); mod_inv_fact(n);
    // 2. ll ans = mod_comb(n,k);

    const ll MAX_N = ${1:200000};
    ll fact[MAX_N+1], inv_fact[MAX_N+1];

    ll mod_pow(ll x, ll y){
      ll res = 1;
        while (y) {
            if (y & 1) {
                res = res * x % MOD;
            }
            x = x * x % MOD;
            y >>= 1;
        }
      return res;
    }

    void mod_fact(ll n){
      fact[0] = 1;
      REP(i,n)fact[i+1] = fact[i] * (i+1) % MOD;
    }

    void mod_inv_fact(ll n){
      inv_fact[n] = mod_pow(fact[n], (MOD-2));
      REP(i,n){
        inv_fact[n-1-i] = inv_fact[n-i] * (n-i) % MOD;
      }
    }

    ll mod_comb(int n, int k){
      return fact[n] * inv_fact[k] % MOD * inv_fact[n-k] % MOD ;
    }

      '''
  'nck':
    'prefix':'nck'
    'body':'''
      // pascal's triangle O(n^2)
      // 1. init C[MAX_N][MAX_N] by comb_table(n);
      // 2. C[n][k] -> nCk

      const int MAX_N = ${1:10000};
      ll C[MAX_N+1][MAX_N+1];
      void comb_table(int n){
        REP(i,n+1){
          REP(j,i+1){
            if(j==0 || j==i){
              C[i][j]=1LL;
            }else{
              C[i][j]=(C[i-1][j-1]+C[i-1][j]);
            }
          }
        }
      }
      '''
  'union_find':
    'prefix':'union_find'
    'body':'''
      const int MAX_N = ${1:200000};

      int par[MAX_N];
      int rk[MAX_N];

      void init(int n){
        REP(i,n){
          par[i] = i;
          rk[i] = 0;
        }
      }

      int find(int x){
        if(par[x] == x){
          return x;
        }else{
          return par[x] = find(par[x]);
        }
      }

      void unite(int x, int y){
        x = find(x);
        y = find(y);
        if(x==y) return;
        if(rk[x] < rk[y]){
          par[x] = y;
        }else{
          par[y] = x;
          if(rk[x] == rk[y]) rk[x]++;
        }
      }

      bool same(int x, int y){
        return find(x) == find(y);
      }

      '''
  'extgcd':
    'prefix':'extgcd'
    'body':'''
      // ax + by = 1; return gcd, change x, y

      ll extgcd(ll a, ll b, ll& x, ll& y){
        ll d = a;
        if(b!=0){
          d = extgcd(b, a%b, y, x);
          y -= (a / b) * x;
        }else{
          x = 1; y = 0;
        }
        return d;
      }
      '''

  'bitdp':
    'prefix':'bitdp'
    'body':'''
      // bitdp O(2^n * n)
      // 1. memset(dp, -1, sizeof(dp));
      // 2. rec(0, 0);

      // example of Traveling Salesman Probrem

      const int MAX_N = 16;
      ll dp[1 << MAX_N][MAX_N];

      ll d[MAX_N][MAX_N];

      ll rec(int S, int v, int n){
        if(dp[S][v] >= 0){
          return dp[S][v];
        }
        if(S==(1<<n)-1 && v == 0){
          return dp[S][v] = 0;
        }
        ll res = INFll;
        REP(u,n){
          if(!(S&1<<u)){
            res = min(res, rec(S | 1 << u, u, n) + d[v][u]);
          }
        }
        return dp[S][v] = res;
      }
      '''

  'bit_sum':
    'prefix':'bit_sum'
    'body':'''
      // bit_sum O(log n) for a query
      // 1. set n;
      // 2. init bit[n+1];

      const int MAX_N = ${1:100000};

      ll bit[MAX_N+1], n;

      ll bit_sum(int i){
        ll s = 0;
        while(i > 0){
          s += bit[i];
          i -= i & -i;
        }
        return s;
      }

      void bit_add(int i, ll x){
        while(i <= n){
          bit[i] += x;
          i += i & -i;
        }
      }

      '''

  'sort_struct':
    'prefix':'sort_struct'
    'body':'''
      // sort struct ascending in first, descending in second

      struct ${1:hako}{
        ${2:int} ${3:w};
        ${4:int} ${5:h};
        bool operator<( const ${1:hako}& right ) const {
              return ${3:w} == right.${3:w} ? ${5:h} > right.${5:h} : ${3:w} < right.${3:w};
          }
      };

      '''
  'comb_enum':
    'prefix':'comb_enum'
    'body':'''
      // enumerate nCk

      ll comb = (1 << ${1:k}) -1;
      while(comb < 1 << n){
        REP(i, n){
          if (1 << i & comb){
            // do operate
          }
        }

        ll x = comb & -comb;
        ll y = comb + x;
        comb = ((comb & ~y) / x >> 1) | y;
      }


      '''
  'lca':
    'prefix':'lca'
    'body':'''
      // lca : O(n log n) for init , O(log n) for a query
      // 1. setting graph root and G
      // 2. use lca

      // depth can be used for calc the distance

      const int MAX_V = ${1:100000};
      const int MAX_LOG_V = ${2:20};

      vi G[MAX_V];
      int root;

      int parent[MAX_LOG_V][MAX_V];
      int depth[MAX_V];

      void lca_dfs(int v, int p, int d){
        parent[0][v] = p;
        depth[v] = d;
        REP(i, G[v].size()){
          if(G[v][i] != p) lca_dfs(G[v][i], v, d+1);
        }
      }

      void lca_init(int V){
        lca_dfs(root, -1, 0);

        REP(k, MAX_LOG_V-1){
          REP(v, V){
            if(parent[k][v] < 0) parent[k+1][v] = -1;
            else parent[k+1][v] = parent[k][parent[k][v]];
          }
        }
      }

      int lca(int u, int v){
        if(depth[u] > depth[v]) swap(u,v);
        REP(k, MAX_LOG_V){
          if((depth[v] - depth[u]) >> k & 1){
            v = parent[k][v];
          }
        }
        if(u==v) return u;

        for(int k = MAX_LOG_V -1; k >= 0; k--){
          if(parent[k][u] != parent[k][v]){
            u = parent[k][u];
            v = parent[k][v];
          }
        }
        return parent[0][u];

      }
      '''
  'max_flow':
    'prefix':'max_flow'
    'body':'''
      // ford-fulkerson O(FE) F:Flow
      // maximum flow problem
      // 1. init G[V] by add_edge
      // 2. max_flow(s, t) return the max flow

      const int MAX_V = ${1:100000};

      struct edge{int to, cap, rev;};

      vector<edge> G[MAX_V];
      bool used[MAX_V];

      void add_edge(int from, int to, int cap){
        G[from].push_back((edge){to, cap, int(G[to].size())});
        G[to].push_back((edge){from, 0, int(G[from].size() -1)});
      }

      int dfs(int v, int t, int f){
        if(v == t) return f;
        used[v] = true;
        for (int i = 0; i < G[v].size(); i++){
          edge &e = G[v][i];
          if(!used[e.to] && e.cap > 0){
            int d = dfs(e.to, t, min(f, e.cap));
            if (d > 0){
              e.cap -= d;
              G[e.to][e.rev].cap += d;
              return d;
            }
          }
        }
        return 0;
      }

      int max_flow(int s, int t){
        int flow = 0;
        for(;;){
          memset(used, 0, sizeof(used));
          int f = dfs(s, t, INFi);
          if(f == 0) return flow;
          flow += f;
        }
      }
      '''

  'max_flow_fast':
    'prefix':'max_flow_fast'
    'body':'''
      // Dinic O(EV^2)
      // maximum flow problem
      // 1. init G[V] by add_edge
      // 2. max_flow(s, t) return the max flow

      const int MAX_V = ${1:100000};

      struct edge{int to, cap, rev;};

      vector<edge> G[MAX_V];
      int level[MAX_V];
      int iter[MAX_V];

      void add_edge(int from, int to, int cap){
        G[from].push_back((edge){to, cap, int(G[to].size())});
        G[to].push_back((edge){from, 0, int(G[from].size() -1)});
      }

      void bfs(int s){
        memset(level, -1, sizeof(level));
        queue<int> que;
        level[s] = 0;
        que.push(s);
        while(!que.empty()){
          int v = que.front(); que.pop();
          REP(i,G[v].size()){
            edge &e = G[v][i];
            if (e.cap > 0 && level[e.to] < 0){
              level[e.to] = level[v] + 1;
              que.push(e.to);
            }
          }
        }
      }

      int dfs(int v, int t, int f){
        if(v == t) return f;
        for (int &i = iter[v]; i < G[v].size(); i++){
          edge &e = G[v][i];
          if(e.cap > 0 && level[v] < level[e.to]){
            int d = dfs(e.to, t, min(f, e.cap));
            if (d > 0){
              e.cap -= d;
              G[e.to][e.rev].cap += d;
              return d;
            }
          }
        }
        return 0;
      }

      int max_flow(int s, int t){
        int flow = 0;
        for(;;){
          bfs(s);
          if(level[t] < 0) return flow;
          int f;
          while((f = dfs(s, t, INFi)) > 0){
            flow += f;
          }

        }
      }
      '''

  'min_cost_flow':
    'prefix':'min_cost_flow'
    'body':'''
      // min_cost_flow O(FE log V)  F : Flow
      // 1. set V
      // 2. min_cost_flow(source, destination, flow)


      const int MAX_V = ${1:100000};

      struct edge{int to, cap, cost, rev;};

      int V;
      vector<edge> G[MAX_V];
      int h[MAX_V];
      int dist[MAX_V];
      int prevv[MAX_V], preve[MAX_V];

      void add_edge(int from, int to, int cap, int cost){
        G[from].push_back((edge){to, cap, cost, int(G[to].size())});
        G[to].push_back((edge){from, 0, -cost, int(G[from].size())});
      }

      int min_cost_flow(int s, int t, int f){
        int res = 0;
        fill(h, h+V, 0);
        while(f > 0) {
          priority_queue<pi, vector<pi>, greater<pi>  > que;
          fill(dist, dist + V, INFi);
          dist[s] = 0;
          que.push(pi(0,s));

          while(!que.empty()){
            pi p = que.top(); que.pop();
            int v = p.second;
            if(dist[v] < p.first) continue;
            for(int i = 0; i < G[v].size(); i++){
              edge &e = G[v][i];
              if(e.cap > 0 && dist[e.to] > dist[v] + e.cost + h[v] - h[e.to]){
                dist[e.to] = dist[v] + e.cost + h[v] - h[e.to];
                prevv[e.to] = v;
                preve[e.to] = i;
                que.push(pi(dist[e.to], e.to));
              }
            }
          }
          if(dist[t] == INFi){
            return -1;
          }
          REP(v, V) h[v] += dist[v];

          int d = f;
          for(int v = t; v != s; v = prevv[v]){
            d = min(d, G[prevv[v]][preve[v]].cap);
          }
          f -= d;
          res += d * h[t];
          for(int v = t; v != s; v = prevv[v]){
            edge &e = G[prevv[v]][preve[v]];
            e.cap -= d;
            G[v][e.rev].cap += d;
          }
        }
        return res;
      }

      '''

  'moebius':
    'prefix':'moebius'
    'body':'''
      map<int,int> moebius(int n){
        map<int, int> res;
        vector<int> primes;

        for(int i = 2; i * i <= n; i++){
          if(n % i == 0) primes.push_back(i);
          while(n % i == 0) n /= i;
        }
        if(n!=1) primes.push_back(n);

        int m = primes.size();
        REP(i, 1 << m){
          int mb = 1;
          int d = 1;
          REP(j,m){
            if(i & 1 << j){
              mb *= -1;
              d *= primes[j];
            }
          }
          res[d] = mb;
        }
        return res;
      }
      '''

  'prime_factor':
    'prefix':'prime_factor'
    'body':'''
      map<int, int> prime_factor(ll n){
        map<int, int> res;
        for(int i = 2; i * i <= n; i++){
          while(n % i == 0){
            res[i]++;
            n /= i;
          }
        }
        if(n != 1) res[n] = 1;
        return res;
      }
      '''

  'divisor':
    'prefix':'divisor'
    'body':'''
      vll divisor(ll n){
        vll res;
        for(int i = 1; i * i <= n; i++){
          if(n % i == 0){
            res.push_back(i);
            if(i != n / i) res.push_back(n / i);
          }
        }
        return res;
      }
      '''

  'setsubiji':
    'prefix':'setsubiji'
    'body':'''
      // make setsubiji gyoretsu sa O( n log^2 n)
      // 1. construct_sa(string s, int sa[] )
      // 2. use sa

      // make takasa gyoretus lsa O(n)
      // construct_lcp(string s, int sa[], int lsa[])

      const int MAX_N = 1000000;

      int n, k;
      int ranker[MAX_N+1];
      int tmp[MAX_N+1];

      bool compare_sa(int i, int j){
        if(ranker[i] != ranker[j]) return ranker[i] < ranker[j];
        else {
          int ri = i + k <= n ? ranker[i+k] : -1;
          int rj = j + k <= n ? ranker[j+k] : -1;
          return ri < rj;
        }
      }

      void construct_sa(string S, int *sa){
        n = S.length();

        REP(i,n+1){
          sa[i] = i;
          ranker[i] = i < n ? S[i] : -1;
        }

        for(k = 1; k <= n; k *= 2){
          sort(sa, sa + n + 1, compare_sa);

          tmp[sa[0]] = 0;
          for(int i = 1; i <= n; i++){
            tmp[sa[i]] = tmp[sa[i-1]] + (compare_sa(sa[i-1], sa[i]) ? 1 : 0);
          }
          for(int i = 0; i <= n; i++){
            ranker[i] = tmp[i];
          }
        }
      }

      void construct_lcp(string S, int *sa, int *lcp){
        int n = S.length();
        REP(i,n+1) ranker[sa[i]] = i;

        int h = 0;
        lcp[0] = 0;
        REP(i,n){
          int j = sa[ranker[i] - 1];

          if(h > 0) h--;
          for(; j + h < n && i + h < n; h++){
            if(S[j+h] != S[i+h]) break;
          }

          lcp[ranker[i] - 1] = h;
        }
      }

      '''

  'gauss_jordan':
    'prefix':'gauss_jordan'
    'body':'''
      // calc renritsu houteishiki O( n^3)
      // use EPS for marume gosa

      typedef vector<double> vec;
      typedef vector<vec> mat;

      vec gauss_jordan(const mat& A, const vec& b){
        int n = A.size();
        mat B(n, vec(n+1));
        REP(i,n) REP(j, n) B[i][j] = A[i][j];
        REP(i,n) B[i][n] = b[i];

        REP(i,n){
          int pivot = i;
          for(int j = i; j < n; j++){
            if(abs(B[j][i]) > abs(B[pivot][i])) pivot = j;
          }
          swap(B[i], B[pivot]);

          if(abs(B[i][i]) < EPS) return vec();

          for(int j = i + 1; j <= n; j++) B[i][j] /= B[i][i];
          REP(j, n){
            if(i != j){
              for(int k = i + 1; k <= n; k++) B[j][k] -= B[j][i] * B[i][k];
            }
          }
        }
        vec x(n);
        REP(i,n) x[i] = B[i][n];
        return x;
      }

      '''
